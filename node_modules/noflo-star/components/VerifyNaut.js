// Generated by CoffeeScript 1.5.0
(function() {
  var VerifyNaut, https, noflo,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  noflo = require('noflo');

  https = require('https');

  VerifyNaut = (function(_super) {

    __extends(VerifyNaut, _super);

    function VerifyNaut() {
      var _this = this;
      this.domain = null;
      this.idp = null;
      this.inPorts = {
        "in": new noflo.Port,
        domain: new noflo.Port,
        idp: new noflo.Port
      };
      this.outPorts = {
        out: new noflo.Port,
        error: new noflo.Port
      };
      this.inPorts.domain.on('data', function(data) {
        return _this.domain = data;
      });
      this.inPorts.idp.on('data', function(data) {
        return _this.idp = data;
      });
      VerifyNaut.__super__.constructor.call(this);
    }

    VerifyNaut.prototype.doAsync = function(assertion, callback) {
      var _this = this;
      if (!this.domain) {
        callback(new Error('no domain provided'));
        return;
      }
      if (!this.idp) {
        callback(new Error('no idp provided'));
        return;
      }
      return this.push(this.domain, assertion, this.idp, function(err, res) {
        _this.outPorts.out.send(res);
        _this.outPorts.out.disconnect();
        return callback();
      });
    };

    VerifyNaut.prototype.push = function(domain, assertion, idp, cb) {
      var body, options, req;
      body = JSON.stringify({
        assertion: assertion,
        audience: domain
      });
      options = {
        host: idp,
        port: 443,
        path: "/verify",
        method: "POST",
        headers: {
          "Content-Type": "application/x-www-form-urlencoded",
          "Content-Length": body.length
        }
      };
      req = https.request(options, function(res) {
        var data;
        res.setEncoding("utf8");
        data = '';
        res.on("data", function(chunk) {
          return data += chunk;
        });
        return res.on("end", function() {
          return cb(null, JSON.parse(data));
        });
      });
      req.on('error', function(e) {
        console.log(e);
        return cb(e, null);
      });
      req.write(body);
      return req.end();
    };

    exports.getComponent = function() {
      return new VerifyNaut;
    };

    return VerifyNaut;

  })(noflo.AsyncComponent);

}).call(this);
