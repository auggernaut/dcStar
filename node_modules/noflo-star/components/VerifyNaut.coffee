noflo = require 'noflo'
https = require 'https'

class VerifyNaut extends noflo.AsyncComponent
  constructor: ->
    @domain = null
    @idp = null

    @inPorts =
      in: new noflo.Port
      domain: new noflo.Port
      idp: new noflo.Port
    @outPorts =
      out: new noflo.Port
      error: new noflo.Port

    @inPorts.domain.on 'data', (data) =>
      @domain = data

    @inPorts.idp.on 'data', (data) =>
      @idp = data

    super()

  doAsync: (assertion, callback) ->
    unless @domain
      callback new Error 'no domain provided'
      return
    unless @idp
      callback new Error 'no idp provided'
      return

    @push @domain, assertion, @idp, (err, res) =>
      @outPorts.out.send res
      @outPorts.out.disconnect()
      callback()

  push: (domain, assertion, idp, cb) ->
    body = JSON.stringify
      assertion: assertion
      audience: domain
    options =
      host: idp
      port: 443
      path: "/verify"
      method: "POST"
      headers:
        "Content-Type": "application/x-www-form-urlencoded"
        "Content-Length": body.length
    req = https.request options, (res) ->
      res.setEncoding "utf8"
      data = ''
      res.on "data", (chunk) ->
        data += chunk
      res.on "end", ->
        cb null, JSON.parse data
    req.on 'error', (e) ->
      console.log e
      cb e, null

    req.write body
    req.end()

  exports.getComponent = -> new VerifyNaut